<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>视网膜中的视觉处理</title>
    <link href="/2023/08/06/%E8%A7%86%E7%BD%91%E8%86%9C%E4%B8%AD%E7%9A%84%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86/"/>
    <url>/2023/08/06/%E8%A7%86%E7%BD%91%E8%86%9C%E4%B8%AD%E7%9A%84%E8%A7%86%E8%A7%89%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-视觉信息流"><a href="#1-视觉信息流" class="headerlink" title="1.视觉信息流"></a>1.视觉信息流</h2><p>我主要研究的方向是类脑视觉,下图左半部分是我们人类的视觉处理过程中的从视网膜(retina)到脑区的信息流图,右半部分是我们具体的人脑的图形界面.</p><p><img src="/../page_image/image-20230806115717205.png" alt="视觉信息流图"></p><p>值得注意的是上图中左半部分V1区及其以上区域是位于视觉皮层中,而retina是视网膜,其中包含了一些常见的神经细胞如视锥细胞(cone),视杠细胞(rod)和神经节细胞(ganglion).外侧膝状体(LGN)是连接视网膜和视觉皮层的重要通路.</p><h2 id="2-视网膜中的信息处理"><a href="#2-视网膜中的信息处理" class="headerlink" title="2.视网膜中的信息处理"></a>2.视网膜中的信息处理</h2><p>视网膜位于眼睛的内表面，包含只对电磁波谱的某个区间敏感的光感受器，以及将视觉信息转化为神经信号的细胞.</p><p><img src="/../page_image/image-20230806121530249.png" alt="视网膜结构图"></p><h4 id="2-1-视锥细胞和视杠细胞"><a href="#2-1-视锥细胞和视杠细胞" class="headerlink" title="2.1 视锥细胞和视杠细胞"></a>2.1 视锥细胞和视杠细胞</h4><p>视杠细胞对低亮度有较高的敏感性,而视锥细胞需要高水平的亮度.对于视锥细胞,我们可以根据它们的波长吸收率将视锥分类为S(短波长&#x3D;蓝色),M(中波长&#x3D;绿色)和L(长波长&#x3D;红色)视锥.</p><p><img src="/../page_image/image-20230806121552548.png" alt="光感受器细胞图"></p><p>视杆细胞和视锥细胞的分辨率（每平方毫米的受体数量）随着距中央凹的距离而急剧减少,大多数视锥细胞集中在中央凹内和中央凹周围,而视杆细胞以高偏心率构成光感受器的主体.</p><p><img src="/../page_image/image-20230806144807121.png" alt="光感受器细胞分布图"></p><p>因为只有视网膜的一小部分具有高空间分辨率(中央凹),所以需要注视控制来引导眼睛,使得感兴趣的场景特征投影到中央凹上.灵长类动物具有广泛的系统来主动控制眼球运动(涉及额叶中的FEF,顶叶中的LIP和中脑中的上级丘).而在计算机视觉方面(如CNN)对这方面的讨论并没有.</p>]]></content>
    
    
    
    <tags>
      
      <tag>视觉统计学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNN,einops</title>
    <link href="/2023/08/05/CNN,einops/"/>
    <url>/2023/08/05/CNN,einops/</url>
    
    <content type="html"><![CDATA[<h2 id="1-torch"><a href="#1-torch" class="headerlink" title="1. torch"></a>1. torch</h2><h4 id="1-1-二维卷积"><a href="#1-1-二维卷积" class="headerlink" title="1.1 二维卷积"></a>1.1 二维卷积</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br>q = nn.Conv2d(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))<span class="hljs-comment">#in_channel,out_channel,kernel_size</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(q.named_parameters())[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].shape)<span class="hljs-comment">#卷积核的维度(1,3,4,4)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(q.named_parameters())[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>].shape)<span class="hljs-comment">#偏置项的维度(1)</span><br>data  = torch.randn(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">64</span>,<span class="hljs-number">64</span>)<span class="hljs-comment">#batch,channel,height,weight</span><br><span class="hljs-built_in">print</span>(q(a).shape)<span class="hljs-comment">#(1,1,61,61)</span><br></code></pre></td></tr></table></figure><h2 id="2-einops"><a href="#2-einops" class="headerlink" title="2.einops"></a>2.einops</h2><h4 id="2-1rearrange"><a href="#2-1rearrange" class="headerlink" title="2.1rearrange"></a>2.1rearrange</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> einops <span class="hljs-keyword">import</span> rearrange, repeat,reduce<br>img = torch.randn(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>,<span class="hljs-number">3</span>)<br>img2 = rearrange(img,<span class="hljs-string">&quot;c h w -&gt; 1 c h w&quot;</span>)<span class="hljs-comment">#(1,300,300,3)</span><br>img3 = rearrange(img2,<span class="hljs-string">&quot;b c (h h1) (w w1) -&gt; b (h w) (h1 w1 c)&quot;</span>,h1=<span class="hljs-number">100</span>,w1=<span class="hljs-number">100</span>)<span class="hljs-comment">#生成3*3的flatten列向量(1,9,30000)</span><br>img4 = rearrange(img2,<span class="hljs-string">&quot;b c (h h1) (w wq) -&gt; b (h w) h1 w1 c&quot;</span>,h1=<span class="hljs-number">100</span>,w1=<span class="hljs-number">100</span>)<span class="hljs-comment">#生成3*3的裁剪图(1,9,100,100,3)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组操作</title>
    <link href="/2023/08/04/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/08/04/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-迭代"><a href="#1-迭代" class="headerlink" title="1. 迭代"></a>1. 迭代</h2><h4 id="1-1-for循环迭代"><a href="#1-1-for循环迭代" class="headerlink" title="1.1 for循环迭代"></a>1.1 for循环迭代</h4><p>通过下列代码可以便利一个数组并且将数值增加到一个list变量中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">list</span>.append(i)<br></code></pre></td></tr></table></figure><h4 id="1-2-列表迭代式"><a href="#1-2-列表迭代式" class="headerlink" title="1.2 列表迭代式"></a>1.2 列表迭代式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>list2 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h4 id="1-3-index与元素同时迭代"><a href="#1-3-index与元素同时迭代" class="headerlink" title="1.3 index与元素同时迭代"></a>1.3 index与元素同时迭代</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)]<br><span class="hljs-built_in">map</span> = &#123;&#125;<br><span class="hljs-keyword">for</span> index,data <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br><span class="hljs-built_in">map</span>[data] = index<br></code></pre></td></tr></table></figure><h4 id="1-4-zip迭代式"><a href="#1-4-zip迭代式" class="headerlink" title="1.4 zip迭代式"></a>1.4 zip迭代式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)):<br><span class="hljs-built_in">print</span>(i,j)<br></code></pre></td></tr></table></figure><h4 id="1-5-product迭代式"><a href="#1-5-product迭代式" class="headerlink" title="1.5 product迭代式"></a>1.5 product迭代式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> product(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)):<br><span class="hljs-built_in">print</span>(i,j)<br></code></pre></td></tr></table></figure><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2. 切片"></a>2. 切片</h2><h4 id="2-1-一维切片"><a href="#2-1-一维切片" class="headerlink" title="2.1 一维切片"></a>2.1 一维切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)]<br>a = <span class="hljs-built_in">list</span>[:<span class="hljs-number">10</span>]<span class="hljs-comment">#前10个元素</span><br>b = <span class="hljs-built_in">list</span>[<span class="hljs-number">10</span>:]<span class="hljs-comment">#从第10个元素开始</span><br>c = <span class="hljs-built_in">list</span>[-<span class="hljs-number">10</span>:]<span class="hljs-comment">#最后10个元素</span><br>d = <span class="hljs-built_in">list</span>[-<span class="hljs-number">1</span>]<span class="hljs-comment">#取最后一个元素,此时结果为一个元素</span><br>e = <span class="hljs-built_in">list</span>[-<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>]<span class="hljs-comment">#此时仍然取最后一个元素,但此时结果为一个数组,注意与d的区别</span><br>f = <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<span class="hljs-comment">#起点:终点:步长</span><br>g = <span class="hljs-built_in">list</span>[::<span class="hljs-number">2</span>]<span class="hljs-comment">#以2为步长取元素,抽点操作</span><br>h = <span class="hljs-built_in">list</span>[::-<span class="hljs-number">1</span>]<span class="hljs-comment">#将原数组逆序排列</span><br></code></pre></td></tr></table></figure><h4 id="2-2-多维切片"><a href="#2-2-多维切片" class="headerlink" title="2.2 多维切片"></a>2.2 多维切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.random.randn(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">#10行10列的二维矩阵</span><br>b = a[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>,<span class="hljs-number">5</span>:<span class="hljs-number">6</span>]<span class="hljs-comment">#取a的2行,5列,此时仍为二维矩阵</span><br>c = a[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>:<span class="hljs-number">6</span>]<span class="hljs-comment">#取a的2行,5列,此时仍为一维矩阵</span><br>d = a[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]<span class="hljs-comment">#取a的2行,5列,此时仍为一个元素</span><br>e = a[:<span class="hljs-number">5</span>,-<span class="hljs-number">5</span>:]<span class="hljs-comment">#取前5行,后5列,此时为二维矩阵</span><br></code></pre></td></tr></table></figure><h2 id="3-numpy的生成式"><a href="#3-numpy的生成式" class="headerlink" title="3. numpy的生成式"></a>3. numpy的生成式</h2><h4 id="3-1-初始化数组"><a href="#3-1-初始化数组" class="headerlink" title="3.1 初始化数组"></a>3.1 初始化数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-comment">#*参数传入方式,可以随意输入int数字,输出标准正太分布的多维矩阵</span><br>b = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<span class="hljs-comment">#开始,结束,矩阵维度的随机整数</span><br>c = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.01</span>)<span class="hljs-comment">#开始,结束,步长</span><br>d = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>)<span class="hljs-comment">#开始,结束,点数</span><br></code></pre></td></tr></table></figure><h4 id="3-2-numpy矩阵乘法"><a href="#3-2-numpy矩阵乘法" class="headerlink" title="3.2 numpy矩阵乘法"></a>3.2 numpy矩阵乘法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>b = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>)<span class="hljs-comment">#维度变换</span><br>c = a@b<span class="hljs-comment">#矩阵乘法</span><br></code></pre></td></tr></table></figure><h4 id="3-3-numpy数组操作"><a href="#3-3-numpy数组操作" class="headerlink" title="3.3 numpy数组操作"></a>3.3 numpy数组操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(a.shape)<span class="hljs-comment">#查看a的维度</span><br>b = a.reshape(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">1</span>)<span class="hljs-comment">#-1让numpy自动推断剩余的维度,需要保证整除</span><br>c = a.transpose(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">#将多维矩阵的维度进行调换</span><br>d = c.flatten()<span class="hljs-comment">#将矩阵展平为1维度</span><br>e = d.tolist()<span class="hljs-comment">#将numpy转为多维list,便于序列化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/02/hello-world/"/>
    <url>/2023/08/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
